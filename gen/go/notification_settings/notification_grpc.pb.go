// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: notification_settings/notification.proto

package notification_settings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationSettings_EnableTelegramNotification_FullMethodName         = "/notification.NotificationSettings/EnableTelegramNotification"
	NotificationSettings_UpdateTelegramNotificationSettings_FullMethodName = "/notification.NotificationSettings/UpdateTelegramNotificationSettings"
)

// NotificationSettingsClient is the client API for NotificationSettings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationSettingsClient interface {
	EnableTelegramNotification(ctx context.Context, in *EnableTelegramNotificationRequest, opts ...grpc.CallOption) (*EnableTelegramNotificationResponse, error)
	UpdateTelegramNotificationSettings(ctx context.Context, in *UpdateTelegramNotificationSettingsRequest, opts ...grpc.CallOption) (*UpdateTelegramNotificationSettingsResponse, error)
}

type notificationSettingsClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationSettingsClient(cc grpc.ClientConnInterface) NotificationSettingsClient {
	return &notificationSettingsClient{cc}
}

func (c *notificationSettingsClient) EnableTelegramNotification(ctx context.Context, in *EnableTelegramNotificationRequest, opts ...grpc.CallOption) (*EnableTelegramNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableTelegramNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationSettings_EnableTelegramNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationSettingsClient) UpdateTelegramNotificationSettings(ctx context.Context, in *UpdateTelegramNotificationSettingsRequest, opts ...grpc.CallOption) (*UpdateTelegramNotificationSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTelegramNotificationSettingsResponse)
	err := c.cc.Invoke(ctx, NotificationSettings_UpdateTelegramNotificationSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationSettingsServer is the server API for NotificationSettings service.
// All implementations must embed UnimplementedNotificationSettingsServer
// for forward compatibility.
type NotificationSettingsServer interface {
	EnableTelegramNotification(context.Context, *EnableTelegramNotificationRequest) (*EnableTelegramNotificationResponse, error)
	UpdateTelegramNotificationSettings(context.Context, *UpdateTelegramNotificationSettingsRequest) (*UpdateTelegramNotificationSettingsResponse, error)
	mustEmbedUnimplementedNotificationSettingsServer()
}

// UnimplementedNotificationSettingsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationSettingsServer struct{}

func (UnimplementedNotificationSettingsServer) EnableTelegramNotification(context.Context, *EnableTelegramNotificationRequest) (*EnableTelegramNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTelegramNotification not implemented")
}
func (UnimplementedNotificationSettingsServer) UpdateTelegramNotificationSettings(context.Context, *UpdateTelegramNotificationSettingsRequest) (*UpdateTelegramNotificationSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTelegramNotificationSettings not implemented")
}
func (UnimplementedNotificationSettingsServer) mustEmbedUnimplementedNotificationSettingsServer() {}
func (UnimplementedNotificationSettingsServer) testEmbeddedByValue()                              {}

// UnsafeNotificationSettingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationSettingsServer will
// result in compilation errors.
type UnsafeNotificationSettingsServer interface {
	mustEmbedUnimplementedNotificationSettingsServer()
}

func RegisterNotificationSettingsServer(s grpc.ServiceRegistrar, srv NotificationSettingsServer) {
	// If the following call pancis, it indicates UnimplementedNotificationSettingsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationSettings_ServiceDesc, srv)
}

func _NotificationSettings_EnableTelegramNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTelegramNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationSettingsServer).EnableTelegramNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationSettings_EnableTelegramNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationSettingsServer).EnableTelegramNotification(ctx, req.(*EnableTelegramNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationSettings_UpdateTelegramNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTelegramNotificationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationSettingsServer).UpdateTelegramNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationSettings_UpdateTelegramNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationSettingsServer).UpdateTelegramNotificationSettings(ctx, req.(*UpdateTelegramNotificationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationSettings_ServiceDesc is the grpc.ServiceDesc for NotificationSettings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationSettings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.NotificationSettings",
	HandlerType: (*NotificationSettingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableTelegramNotification",
			Handler:    _NotificationSettings_EnableTelegramNotification_Handler,
		},
		{
			MethodName: "UpdateTelegramNotificationSettings",
			Handler:    _NotificationSettings_UpdateTelegramNotificationSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification_settings/notification.proto",
}
